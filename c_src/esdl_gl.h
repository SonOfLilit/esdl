/*  
 *  Copyright (c) 2003 Dan Gudmundsson
 *  See the file "license.terms" for information on usage and redistribution
 *  of this file, and for a DISCLAIMER OF ALL WARRANTIES.
 *
 *     $Id: esdl_gl.h,v 1.1 2004/03/30 07:49:22 bjorng Exp $
 *
 */
enum { glAccumFunc = OPENGL_H + 0 };
void egl_accum (sdl_data *, int, char *); 
enum { glAlphaFuncFunc = OPENGL_H + 1 };
void egl_alphaFunc (sdl_data *, int, char *); 
enum { glAreTexturesResidentFunc = OPENGL_H + 2 };
void egl_areTexturesResident (sdl_data *, int, char *); 
enum { glArrayElementFunc = OPENGL_H + 3 };
void egl_arrayElement (sdl_data *, int, char *); 
enum { glBeginFunc = OPENGL_H + 4 };
void egl_begin (sdl_data *, int, char *); 
enum { glBindTextureFunc = OPENGL_H + 5 };
void egl_bindTexture (sdl_data *, int, char *); 
enum { glBitmapFunc = OPENGL_H + 6 };
void egl_bitmap (sdl_data *, int, char *); 
enum { glBlendFuncFunc = OPENGL_H + 7 };
void egl_blendFunc (sdl_data *, int, char *); 
enum { glCallListFunc = OPENGL_H + 8 };
void egl_callList (sdl_data *, int, char *); 
enum { glCallListsFunc = OPENGL_H + 9 };
void egl_callLists (sdl_data *, int, char *); 
enum { glClearFunc = OPENGL_H + 10 };
void egl_clear (sdl_data *, int, char *); 
enum { glClearAccumFunc = OPENGL_H + 11 };
void egl_clearAccum (sdl_data *, int, char *); 
enum { glClearColorFunc = OPENGL_H + 12 };
void egl_clearColor (sdl_data *, int, char *); 
enum { glClearDepthFunc = OPENGL_H + 13 };
void egl_clearDepth (sdl_data *, int, char *); 
enum { glClearIndexFunc = OPENGL_H + 14 };
void egl_clearIndex (sdl_data *, int, char *); 
enum { glClearStencilFunc = OPENGL_H + 15 };
void egl_clearStencil (sdl_data *, int, char *); 
enum { glClipPlaneFunc = OPENGL_H + 16 };
void egl_clipPlane (sdl_data *, int, char *); 
enum { glColor3bvFunc = OPENGL_H + 17 };
void egl_color3bv (sdl_data *, int, char *); 
enum { glColor3dvFunc = OPENGL_H + 18 };
void egl_color3dv (sdl_data *, int, char *); 
enum { glColor3fvFunc = OPENGL_H + 19 };
void egl_color3fv (sdl_data *, int, char *); 
enum { glColor3ivFunc = OPENGL_H + 20 };
void egl_color3iv (sdl_data *, int, char *); 
enum { glColor3svFunc = OPENGL_H + 21 };
void egl_color3sv (sdl_data *, int, char *); 
enum { glColor3ubvFunc = OPENGL_H + 22 };
void egl_color3ubv (sdl_data *, int, char *); 
enum { glColor3uivFunc = OPENGL_H + 23 };
void egl_color3uiv (sdl_data *, int, char *); 
enum { glColor3usvFunc = OPENGL_H + 24 };
void egl_color3usv (sdl_data *, int, char *); 
enum { glColor4bvFunc = OPENGL_H + 25 };
void egl_color4bv (sdl_data *, int, char *); 
enum { glColor4dvFunc = OPENGL_H + 26 };
void egl_color4dv (sdl_data *, int, char *); 
enum { glColor4fvFunc = OPENGL_H + 27 };
void egl_color4fv (sdl_data *, int, char *); 
enum { glColor4ivFunc = OPENGL_H + 28 };
void egl_color4iv (sdl_data *, int, char *); 
enum { glColor4svFunc = OPENGL_H + 29 };
void egl_color4sv (sdl_data *, int, char *); 
enum { glColor4ubvFunc = OPENGL_H + 30 };
void egl_color4ubv (sdl_data *, int, char *); 
enum { glColor4uivFunc = OPENGL_H + 31 };
void egl_color4uiv (sdl_data *, int, char *); 
enum { glColor4usvFunc = OPENGL_H + 32 };
void egl_color4usv (sdl_data *, int, char *); 
enum { glColorMaskFunc = OPENGL_H + 33 };
void egl_colorMask (sdl_data *, int, char *); 
enum { glColorMaterialFunc = OPENGL_H + 34 };
void egl_colorMaterial (sdl_data *, int, char *); 
enum { glColorPointerFunc = OPENGL_H + 35 };
void egl_colorPointer (sdl_data *, int, char *); 
enum { glCopyPixelsFunc = OPENGL_H + 36 };
void egl_copyPixels (sdl_data *, int, char *); 
enum { glCopyTexImage1DFunc = OPENGL_H + 37 };
void egl_copyTexImage1D (sdl_data *, int, char *); 
enum { glCopyTexImage2DFunc = OPENGL_H + 38 };
void egl_copyTexImage2D (sdl_data *, int, char *); 
enum { glCopyTexSubImage1DFunc = OPENGL_H + 39 };
void egl_copyTexSubImage1D (sdl_data *, int, char *); 
enum { glCopyTexSubImage2DFunc = OPENGL_H + 40 };
void egl_copyTexSubImage2D (sdl_data *, int, char *); 
enum { glCullFaceFunc = OPENGL_H + 41 };
void egl_cullFace (sdl_data *, int, char *); 
enum { glDeleteListsFunc = OPENGL_H + 42 };
void egl_deleteLists (sdl_data *, int, char *); 
enum { glDeleteTexturesFunc = OPENGL_H + 43 };
void egl_deleteTextures (sdl_data *, int, char *); 
enum { glDepthFuncFunc = OPENGL_H + 44 };
void egl_depthFunc (sdl_data *, int, char *); 
enum { glDepthMaskFunc = OPENGL_H + 45 };
void egl_depthMask (sdl_data *, int, char *); 
enum { glDepthRangeFunc = OPENGL_H + 46 };
void egl_depthRange (sdl_data *, int, char *); 
enum { glDisableFunc = OPENGL_H + 47 };
void egl_disable (sdl_data *, int, char *); 
enum { glDisableClientStateFunc = OPENGL_H + 48 };
void egl_disableClientState (sdl_data *, int, char *); 
enum { glDrawArraysFunc = OPENGL_H + 49 };
void egl_drawArrays (sdl_data *, int, char *); 
enum { glDrawBufferFunc = OPENGL_H + 50 };
void egl_drawBuffer (sdl_data *, int, char *); 
enum { glDrawElementsFunc = OPENGL_H + 51 };
void egl_drawElements (sdl_data *, int, char *); 
enum { glDrawPixelsFunc = OPENGL_H + 52 };
void egl_drawPixels (sdl_data *, int, char *); 
enum { glEdgeFlagFunc = OPENGL_H + 53 };
void egl_edgeFlag (sdl_data *, int, char *); 
enum { glEdgeFlagPointerFunc = OPENGL_H + 54 };
void egl_edgeFlagPointer (sdl_data *, int, char *); 
enum { glEdgeFlagvFunc = OPENGL_H + 55 };
void egl_edgeFlagv (sdl_data *, int, char *); 
enum { glEnableFunc = OPENGL_H + 56 };
void egl_enable (sdl_data *, int, char *); 
enum { glEnableClientStateFunc = OPENGL_H + 57 };
void egl_enableClientState (sdl_data *, int, char *); 
enum { glEndFunc = OPENGL_H + 58 };
void egl_end (sdl_data *, int, char *); 
enum { glEndListFunc = OPENGL_H + 59 };
void egl_endList (sdl_data *, int, char *); 
enum { glEvalCoord1dvFunc = OPENGL_H + 60 };
void egl_evalCoord1dv (sdl_data *, int, char *); 
enum { glEvalCoord1fvFunc = OPENGL_H + 61 };
void egl_evalCoord1fv (sdl_data *, int, char *); 
enum { glEvalCoord2dvFunc = OPENGL_H + 62 };
void egl_evalCoord2dv (sdl_data *, int, char *); 
enum { glEvalCoord2fvFunc = OPENGL_H + 63 };
void egl_evalCoord2fv (sdl_data *, int, char *); 
enum { glEvalMesh1Func = OPENGL_H + 64 };
void egl_evalMesh1 (sdl_data *, int, char *); 
enum { glEvalMesh2Func = OPENGL_H + 65 };
void egl_evalMesh2 (sdl_data *, int, char *); 
enum { glEvalPoint1Func = OPENGL_H + 66 };
void egl_evalPoint1 (sdl_data *, int, char *); 
enum { glEvalPoint2Func = OPENGL_H + 67 };
void egl_evalPoint2 (sdl_data *, int, char *); 
enum { glFeedbackBufferFunc = OPENGL_H + 68 };
void egl_feedbackBuffer (sdl_data *, int, char *); 
enum { glFinishFunc = OPENGL_H + 69 };
void egl_finish (sdl_data *, int, char *); 
enum { glFlushFunc = OPENGL_H + 70 };
void egl_flush (sdl_data *, int, char *); 
enum { glFogfFunc = OPENGL_H + 71 };
void egl_fogf (sdl_data *, int, char *); 
enum { glFogfvFunc = OPENGL_H + 72 };
void egl_fogfv (sdl_data *, int, char *); 
enum { glFogiFunc = OPENGL_H + 73 };
void egl_fogi (sdl_data *, int, char *); 
enum { glFogivFunc = OPENGL_H + 74 };
void egl_fogiv (sdl_data *, int, char *); 
enum { glFrontFaceFunc = OPENGL_H + 75 };
void egl_frontFace (sdl_data *, int, char *); 
enum { glFrustumFunc = OPENGL_H + 76 };
void egl_frustum (sdl_data *, int, char *); 
enum { glGenListsFunc = OPENGL_H + 77 };
void egl_genLists (sdl_data *, int, char *); 
enum { glGenTexturesFunc = OPENGL_H + 78 };
void egl_genTextures (sdl_data *, int, char *); 
enum { glGetBooleanvFunc = OPENGL_H + 79 };
void egl_getBooleanv (sdl_data *, int, char *); 
enum { glGetClipPlaneFunc = OPENGL_H + 80 };
void egl_getClipPlane (sdl_data *, int, char *); 
enum { glGetDoublevFunc = OPENGL_H + 81 };
void egl_getDoublev (sdl_data *, int, char *); 
enum { glGetErrorFunc = OPENGL_H + 82 };
void egl_getError (sdl_data *, int, char *); 
enum { glGetFloatvFunc = OPENGL_H + 83 };
void egl_getFloatv (sdl_data *, int, char *); 
enum { glGetIntegervFunc = OPENGL_H + 84 };
void egl_getIntegerv (sdl_data *, int, char *); 
enum { glGetLightfvFunc = OPENGL_H + 85 };
void egl_getLightfv (sdl_data *, int, char *); 
enum { glGetLightivFunc = OPENGL_H + 86 };
void egl_getLightiv (sdl_data *, int, char *); 
enum { glGetMapdvFunc = OPENGL_H + 87 };
void egl_getMapdv (sdl_data *, int, char *); 
enum { glGetMapfvFunc = OPENGL_H + 88 };
void egl_getMapfv (sdl_data *, int, char *); 
enum { glGetMapivFunc = OPENGL_H + 89 };
void egl_getMapiv (sdl_data *, int, char *); 
enum { glGetMaterialfvFunc = OPENGL_H + 90 };
void egl_getMaterialfv (sdl_data *, int, char *); 
enum { glGetMaterialivFunc = OPENGL_H + 91 };
void egl_getMaterialiv (sdl_data *, int, char *); 
enum { glGetPixelMapfvFunc = OPENGL_H + 92 };
void egl_getPixelMapfv (sdl_data *, int, char *); 
enum { glGetPixelMapuivFunc = OPENGL_H + 93 };
void egl_getPixelMapuiv (sdl_data *, int, char *); 
enum { glGetPixelMapusvFunc = OPENGL_H + 94 };
void egl_getPixelMapusv (sdl_data *, int, char *); 
enum { glGetPointervFunc = OPENGL_H + 95 };
void egl_getPointerv (sdl_data *, int, char *); 
enum { glGetPolygonStippleFunc = OPENGL_H + 96 };
void egl_getPolygonStipple (sdl_data *, int, char *); 
enum { glGetStringFunc = OPENGL_H + 97 };
void egl_getString (sdl_data *, int, char *); 
enum { glGetTexEnvfvFunc = OPENGL_H + 98 };
void egl_getTexEnvfv (sdl_data *, int, char *); 
enum { glGetTexEnvivFunc = OPENGL_H + 99 };
void egl_getTexEnviv (sdl_data *, int, char *); 
enum { glGetTexGendvFunc = OPENGL_H + 100 };
void egl_getTexGendv (sdl_data *, int, char *); 
enum { glGetTexGenfvFunc = OPENGL_H + 101 };
void egl_getTexGenfv (sdl_data *, int, char *); 
enum { glGetTexGenivFunc = OPENGL_H + 102 };
void egl_getTexGeniv (sdl_data *, int, char *); 
enum { glGetTexImageFunc = OPENGL_H + 103 };
void egl_getTexImage (sdl_data *, int, char *); 
enum { glGetTexLevelParameterfvFunc = OPENGL_H + 104 };
void egl_getTexLevelParameterfv (sdl_data *, int, char *); 
enum { glGetTexLevelParameterivFunc = OPENGL_H + 105 };
void egl_getTexLevelParameteriv (sdl_data *, int, char *); 
enum { glGetTexParameterfvFunc = OPENGL_H + 106 };
void egl_getTexParameterfv (sdl_data *, int, char *); 
enum { glGetTexParameterivFunc = OPENGL_H + 107 };
void egl_getTexParameteriv (sdl_data *, int, char *); 
enum { glHintFunc = OPENGL_H + 108 };
void egl_hint (sdl_data *, int, char *); 
enum { glIndexMaskFunc = OPENGL_H + 109 };
void egl_indexMask (sdl_data *, int, char *); 
enum { glIndexPointerFunc = OPENGL_H + 110 };
void egl_indexPointer (sdl_data *, int, char *); 
enum { glIndexdFunc = OPENGL_H + 111 };
void egl_indexd (sdl_data *, int, char *); 
enum { glIndexdvFunc = OPENGL_H + 112 };
void egl_indexdv (sdl_data *, int, char *); 
enum { glIndexfFunc = OPENGL_H + 113 };
void egl_indexf (sdl_data *, int, char *); 
enum { glIndexfvFunc = OPENGL_H + 114 };
void egl_indexfv (sdl_data *, int, char *); 
enum { glIndexiFunc = OPENGL_H + 115 };
void egl_indexi (sdl_data *, int, char *); 
enum { glIndexivFunc = OPENGL_H + 116 };
void egl_indexiv (sdl_data *, int, char *); 
enum { glIndexsFunc = OPENGL_H + 117 };
void egl_indexs (sdl_data *, int, char *); 
enum { glIndexsvFunc = OPENGL_H + 118 };
void egl_indexsv (sdl_data *, int, char *); 
enum { glIndexubFunc = OPENGL_H + 119 };
void egl_indexub (sdl_data *, int, char *); 
enum { glIndexubvFunc = OPENGL_H + 120 };
void egl_indexubv (sdl_data *, int, char *); 
enum { glInitNamesFunc = OPENGL_H + 121 };
void egl_initNames (sdl_data *, int, char *); 
enum { glInterleavedArraysFunc = OPENGL_H + 122 };
void egl_interleavedArrays (sdl_data *, int, char *); 
enum { glIsEnabledFunc = OPENGL_H + 123 };
void egl_isEnabled (sdl_data *, int, char *); 
enum { glIsListFunc = OPENGL_H + 124 };
void egl_isList (sdl_data *, int, char *); 
enum { glIsTextureFunc = OPENGL_H + 125 };
void egl_isTexture (sdl_data *, int, char *); 
enum { glLightModelfFunc = OPENGL_H + 126 };
void egl_lightModelf (sdl_data *, int, char *); 
enum { glLightModelfvFunc = OPENGL_H + 127 };
void egl_lightModelfv (sdl_data *, int, char *); 
enum { glLightModeliFunc = OPENGL_H + 128 };
void egl_lightModeli (sdl_data *, int, char *); 
enum { glLightModelivFunc = OPENGL_H + 129 };
void egl_lightModeliv (sdl_data *, int, char *); 
enum { glLightfFunc = OPENGL_H + 130 };
void egl_lightf (sdl_data *, int, char *); 
enum { glLightfvFunc = OPENGL_H + 131 };
void egl_lightfv (sdl_data *, int, char *); 
enum { glLightiFunc = OPENGL_H + 132 };
void egl_lighti (sdl_data *, int, char *); 
enum { glLightivFunc = OPENGL_H + 133 };
void egl_lightiv (sdl_data *, int, char *); 
enum { glLineStippleFunc = OPENGL_H + 134 };
void egl_lineStipple (sdl_data *, int, char *); 
enum { glLineWidthFunc = OPENGL_H + 135 };
void egl_lineWidth (sdl_data *, int, char *); 
enum { glListBaseFunc = OPENGL_H + 136 };
void egl_listBase (sdl_data *, int, char *); 
enum { glLoadIdentityFunc = OPENGL_H + 137 };
void egl_loadIdentity (sdl_data *, int, char *); 
enum { glLoadMatrixdFunc = OPENGL_H + 138 };
void egl_loadMatrixd (sdl_data *, int, char *); 
enum { glLoadMatrixfFunc = OPENGL_H + 139 };
void egl_loadMatrixf (sdl_data *, int, char *); 
enum { glLoadNameFunc = OPENGL_H + 140 };
void egl_loadName (sdl_data *, int, char *); 
enum { glLogicOpFunc = OPENGL_H + 141 };
void egl_logicOp (sdl_data *, int, char *); 
enum { glMap1dFunc = OPENGL_H + 142 };
void egl_map1d (sdl_data *, int, char *); 
enum { glMap1fFunc = OPENGL_H + 143 };
void egl_map1f (sdl_data *, int, char *); 
enum { glMap2dFunc = OPENGL_H + 144 };
void egl_map2d (sdl_data *, int, char *); 
enum { glMap2fFunc = OPENGL_H + 145 };
void egl_map2f (sdl_data *, int, char *); 
enum { glMapGrid1dFunc = OPENGL_H + 146 };
void egl_mapGrid1d (sdl_data *, int, char *); 
enum { glMapGrid1fFunc = OPENGL_H + 147 };
void egl_mapGrid1f (sdl_data *, int, char *); 
enum { glMapGrid2dFunc = OPENGL_H + 148 };
void egl_mapGrid2d (sdl_data *, int, char *); 
enum { glMapGrid2fFunc = OPENGL_H + 149 };
void egl_mapGrid2f (sdl_data *, int, char *); 
enum { glMaterialfFunc = OPENGL_H + 150 };
void egl_materialf (sdl_data *, int, char *); 
enum { glMaterialfvFunc = OPENGL_H + 151 };
void egl_materialfv (sdl_data *, int, char *); 
enum { glMaterialiFunc = OPENGL_H + 152 };
void egl_materiali (sdl_data *, int, char *); 
enum { glMaterialivFunc = OPENGL_H + 153 };
void egl_materialiv (sdl_data *, int, char *); 
enum { glMatrixModeFunc = OPENGL_H + 154 };
void egl_matrixMode (sdl_data *, int, char *); 
enum { glMultMatrixdFunc = OPENGL_H + 155 };
void egl_multMatrixd (sdl_data *, int, char *); 
enum { glMultMatrixfFunc = OPENGL_H + 156 };
void egl_multMatrixf (sdl_data *, int, char *); 
enum { glNewListFunc = OPENGL_H + 157 };
void egl_newList (sdl_data *, int, char *); 
enum { glNormal3bvFunc = OPENGL_H + 158 };
void egl_normal3bv (sdl_data *, int, char *); 
enum { glNormal3dvFunc = OPENGL_H + 159 };
void egl_normal3dv (sdl_data *, int, char *); 
enum { glNormal3fvFunc = OPENGL_H + 160 };
void egl_normal3fv (sdl_data *, int, char *); 
enum { glNormal3ivFunc = OPENGL_H + 161 };
void egl_normal3iv (sdl_data *, int, char *); 
enum { glNormal3svFunc = OPENGL_H + 162 };
void egl_normal3sv (sdl_data *, int, char *); 
enum { glNormalPointerFunc = OPENGL_H + 163 };
void egl_normalPointer (sdl_data *, int, char *); 
enum { glOrthoFunc = OPENGL_H + 164 };
void egl_ortho (sdl_data *, int, char *); 
enum { glPassThroughFunc = OPENGL_H + 165 };
void egl_passThrough (sdl_data *, int, char *); 
enum { glPixelMapfvFunc = OPENGL_H + 166 };
void egl_pixelMapfv (sdl_data *, int, char *); 
enum { glPixelMapuivFunc = OPENGL_H + 167 };
void egl_pixelMapuiv (sdl_data *, int, char *); 
enum { glPixelMapusvFunc = OPENGL_H + 168 };
void egl_pixelMapusv (sdl_data *, int, char *); 
enum { glPixelStorefFunc = OPENGL_H + 169 };
void egl_pixelStoref (sdl_data *, int, char *); 
enum { glPixelStoreiFunc = OPENGL_H + 170 };
void egl_pixelStorei (sdl_data *, int, char *); 
enum { glPixelTransferfFunc = OPENGL_H + 171 };
void egl_pixelTransferf (sdl_data *, int, char *); 
enum { glPixelTransferiFunc = OPENGL_H + 172 };
void egl_pixelTransferi (sdl_data *, int, char *); 
enum { glPixelZoomFunc = OPENGL_H + 173 };
void egl_pixelZoom (sdl_data *, int, char *); 
enum { glPointSizeFunc = OPENGL_H + 174 };
void egl_pointSize (sdl_data *, int, char *); 
enum { glPolygonModeFunc = OPENGL_H + 175 };
void egl_polygonMode (sdl_data *, int, char *); 
enum { glPolygonOffsetFunc = OPENGL_H + 176 };
void egl_polygonOffset (sdl_data *, int, char *); 
enum { glPolygonStippleFunc = OPENGL_H + 177 };
void egl_polygonStipple (sdl_data *, int, char *); 
enum { glPopAttribFunc = OPENGL_H + 178 };
void egl_popAttrib (sdl_data *, int, char *); 
enum { glPopClientAttribFunc = OPENGL_H + 179 };
void egl_popClientAttrib (sdl_data *, int, char *); 
enum { glPopMatrixFunc = OPENGL_H + 180 };
void egl_popMatrix (sdl_data *, int, char *); 
enum { glPopNameFunc = OPENGL_H + 181 };
void egl_popName (sdl_data *, int, char *); 
enum { glPrioritizeTexturesFunc = OPENGL_H + 182 };
void egl_prioritizeTextures (sdl_data *, int, char *); 
enum { glPushAttribFunc = OPENGL_H + 183 };
void egl_pushAttrib (sdl_data *, int, char *); 
enum { glPushClientAttribFunc = OPENGL_H + 184 };
void egl_pushClientAttrib (sdl_data *, int, char *); 
enum { glPushMatrixFunc = OPENGL_H + 185 };
void egl_pushMatrix (sdl_data *, int, char *); 
enum { glPushNameFunc = OPENGL_H + 186 };
void egl_pushName (sdl_data *, int, char *); 
enum { glRasterPos2dvFunc = OPENGL_H + 187 };
void egl_rasterPos2dv (sdl_data *, int, char *); 
enum { glRasterPos2fvFunc = OPENGL_H + 188 };
void egl_rasterPos2fv (sdl_data *, int, char *); 
enum { glRasterPos2ivFunc = OPENGL_H + 189 };
void egl_rasterPos2iv (sdl_data *, int, char *); 
enum { glRasterPos2svFunc = OPENGL_H + 190 };
void egl_rasterPos2sv (sdl_data *, int, char *); 
enum { glRasterPos3dvFunc = OPENGL_H + 191 };
void egl_rasterPos3dv (sdl_data *, int, char *); 
enum { glRasterPos3fvFunc = OPENGL_H + 192 };
void egl_rasterPos3fv (sdl_data *, int, char *); 
enum { glRasterPos3ivFunc = OPENGL_H + 193 };
void egl_rasterPos3iv (sdl_data *, int, char *); 
enum { glRasterPos3svFunc = OPENGL_H + 194 };
void egl_rasterPos3sv (sdl_data *, int, char *); 
enum { glRasterPos4dvFunc = OPENGL_H + 195 };
void egl_rasterPos4dv (sdl_data *, int, char *); 
enum { glRasterPos4fvFunc = OPENGL_H + 196 };
void egl_rasterPos4fv (sdl_data *, int, char *); 
enum { glRasterPos4ivFunc = OPENGL_H + 197 };
void egl_rasterPos4iv (sdl_data *, int, char *); 
enum { glRasterPos4svFunc = OPENGL_H + 198 };
void egl_rasterPos4sv (sdl_data *, int, char *); 
enum { glReadBufferFunc = OPENGL_H + 199 };
void egl_readBuffer (sdl_data *, int, char *); 
enum { glReadPixelsFunc = OPENGL_H + 200 };
void egl_readPixels (sdl_data *, int, char *); 
enum { glRectdFunc = OPENGL_H + 201 };
void egl_rectd (sdl_data *, int, char *); 
enum { glRectdvFunc = OPENGL_H + 202 };
void egl_rectdv (sdl_data *, int, char *); 
enum { glRectfFunc = OPENGL_H + 203 };
void egl_rectf (sdl_data *, int, char *); 
enum { glRectfvFunc = OPENGL_H + 204 };
void egl_rectfv (sdl_data *, int, char *); 
enum { glRectiFunc = OPENGL_H + 205 };
void egl_recti (sdl_data *, int, char *); 
enum { glRectivFunc = OPENGL_H + 206 };
void egl_rectiv (sdl_data *, int, char *); 
enum { glRectsFunc = OPENGL_H + 207 };
void egl_rects (sdl_data *, int, char *); 
enum { glRectsvFunc = OPENGL_H + 208 };
void egl_rectsv (sdl_data *, int, char *); 
enum { glRenderModeFunc = OPENGL_H + 209 };
void egl_renderMode (sdl_data *, int, char *); 
enum { glRotatedFunc = OPENGL_H + 210 };
void egl_rotated (sdl_data *, int, char *); 
enum { glRotatefFunc = OPENGL_H + 211 };
void egl_rotatef (sdl_data *, int, char *); 
enum { glScaledFunc = OPENGL_H + 212 };
void egl_scaled (sdl_data *, int, char *); 
enum { glScalefFunc = OPENGL_H + 213 };
void egl_scalef (sdl_data *, int, char *); 
enum { glScissorFunc = OPENGL_H + 214 };
void egl_scissor (sdl_data *, int, char *); 
enum { glSelectBufferFunc = OPENGL_H + 215 };
void egl_selectBuffer (sdl_data *, int, char *); 
enum { glShadeModelFunc = OPENGL_H + 216 };
void egl_shadeModel (sdl_data *, int, char *); 
enum { glStencilFuncFunc = OPENGL_H + 217 };
void egl_stencilFunc (sdl_data *, int, char *); 
enum { glStencilMaskFunc = OPENGL_H + 218 };
void egl_stencilMask (sdl_data *, int, char *); 
enum { glStencilOpFunc = OPENGL_H + 219 };
void egl_stencilOp (sdl_data *, int, char *); 
enum { glTexCoord1dvFunc = OPENGL_H + 220 };
void egl_texCoord1dv (sdl_data *, int, char *); 
enum { glTexCoord1fvFunc = OPENGL_H + 221 };
void egl_texCoord1fv (sdl_data *, int, char *); 
enum { glTexCoord1ivFunc = OPENGL_H + 222 };
void egl_texCoord1iv (sdl_data *, int, char *); 
enum { glTexCoord1svFunc = OPENGL_H + 223 };
void egl_texCoord1sv (sdl_data *, int, char *); 
enum { glTexCoord2dvFunc = OPENGL_H + 224 };
void egl_texCoord2dv (sdl_data *, int, char *); 
enum { glTexCoord2fvFunc = OPENGL_H + 225 };
void egl_texCoord2fv (sdl_data *, int, char *); 
enum { glTexCoord2ivFunc = OPENGL_H + 226 };
void egl_texCoord2iv (sdl_data *, int, char *); 
enum { glTexCoord2svFunc = OPENGL_H + 227 };
void egl_texCoord2sv (sdl_data *, int, char *); 
enum { glTexCoord3dvFunc = OPENGL_H + 228 };
void egl_texCoord3dv (sdl_data *, int, char *); 
enum { glTexCoord3fvFunc = OPENGL_H + 229 };
void egl_texCoord3fv (sdl_data *, int, char *); 
enum { glTexCoord3ivFunc = OPENGL_H + 230 };
void egl_texCoord3iv (sdl_data *, int, char *); 
enum { glTexCoord3svFunc = OPENGL_H + 231 };
void egl_texCoord3sv (sdl_data *, int, char *); 
enum { glTexCoord4dvFunc = OPENGL_H + 232 };
void egl_texCoord4dv (sdl_data *, int, char *); 
enum { glTexCoord4fvFunc = OPENGL_H + 233 };
void egl_texCoord4fv (sdl_data *, int, char *); 
enum { glTexCoord4ivFunc = OPENGL_H + 234 };
void egl_texCoord4iv (sdl_data *, int, char *); 
enum { glTexCoord4svFunc = OPENGL_H + 235 };
void egl_texCoord4sv (sdl_data *, int, char *); 
enum { glTexCoordPointerFunc = OPENGL_H + 236 };
void egl_texCoordPointer (sdl_data *, int, char *); 
enum { glTexEnvfFunc = OPENGL_H + 237 };
void egl_texEnvf (sdl_data *, int, char *); 
enum { glTexEnvfvFunc = OPENGL_H + 238 };
void egl_texEnvfv (sdl_data *, int, char *); 
enum { glTexEnviFunc = OPENGL_H + 239 };
void egl_texEnvi (sdl_data *, int, char *); 
enum { glTexEnvivFunc = OPENGL_H + 240 };
void egl_texEnviv (sdl_data *, int, char *); 
enum { glTexGendFunc = OPENGL_H + 241 };
void egl_texGend (sdl_data *, int, char *); 
enum { glTexGendvFunc = OPENGL_H + 242 };
void egl_texGendv (sdl_data *, int, char *); 
enum { glTexGenfFunc = OPENGL_H + 243 };
void egl_texGenf (sdl_data *, int, char *); 
enum { glTexGenfvFunc = OPENGL_H + 244 };
void egl_texGenfv (sdl_data *, int, char *); 
enum { glTexGeniFunc = OPENGL_H + 245 };
void egl_texGeni (sdl_data *, int, char *); 
enum { glTexGenivFunc = OPENGL_H + 246 };
void egl_texGeniv (sdl_data *, int, char *); 
enum { glTexImage1DFunc = OPENGL_H + 247 };
void egl_texImage1D (sdl_data *, int, char *); 
enum { glTexImage2DFunc = OPENGL_H + 248 };
void egl_texImage2D (sdl_data *, int, char *); 
enum { glTexParameterfFunc = OPENGL_H + 249 };
void egl_texParameterf (sdl_data *, int, char *); 
enum { glTexParameterfvFunc = OPENGL_H + 250 };
void egl_texParameterfv (sdl_data *, int, char *); 
enum { glTexParameteriFunc = OPENGL_H + 251 };
void egl_texParameteri (sdl_data *, int, char *); 
enum { glTexParameterivFunc = OPENGL_H + 252 };
void egl_texParameteriv (sdl_data *, int, char *); 
enum { glTexSubImage1DFunc = OPENGL_H + 253 };
void egl_texSubImage1D (sdl_data *, int, char *); 
enum { glTexSubImage2DFunc = OPENGL_H + 254 };
void egl_texSubImage2D (sdl_data *, int, char *); 
enum { glTranslatedFunc = OPENGL_H + 255 };
void egl_translated (sdl_data *, int, char *); 
enum { glTranslatefFunc = OPENGL_H + 256 };
void egl_translatef (sdl_data *, int, char *); 
enum { glVertex2dvFunc = OPENGL_H + 257 };
void egl_vertex2dv (sdl_data *, int, char *); 
enum { glVertex2fvFunc = OPENGL_H + 258 };
void egl_vertex2fv (sdl_data *, int, char *); 
enum { glVertex2ivFunc = OPENGL_H + 259 };
void egl_vertex2iv (sdl_data *, int, char *); 
enum { glVertex2svFunc = OPENGL_H + 260 };
void egl_vertex2sv (sdl_data *, int, char *); 
enum { glVertex3dvFunc = OPENGL_H + 261 };
void egl_vertex3dv (sdl_data *, int, char *); 
enum { glVertex3fvFunc = OPENGL_H + 262 };
void egl_vertex3fv (sdl_data *, int, char *); 
enum { glVertex3ivFunc = OPENGL_H + 263 };
void egl_vertex3iv (sdl_data *, int, char *); 
enum { glVertex3svFunc = OPENGL_H + 264 };
void egl_vertex3sv (sdl_data *, int, char *); 
enum { glVertex4dvFunc = OPENGL_H + 265 };
void egl_vertex4dv (sdl_data *, int, char *); 
enum { glVertex4fvFunc = OPENGL_H + 266 };
void egl_vertex4fv (sdl_data *, int, char *); 
enum { glVertex4ivFunc = OPENGL_H + 267 };
void egl_vertex4iv (sdl_data *, int, char *); 
enum { glVertex4svFunc = OPENGL_H + 268 };
void egl_vertex4sv (sdl_data *, int, char *); 
enum { glVertexPointerFunc = OPENGL_H + 269 };
void egl_vertexPointer (sdl_data *, int, char *); 
enum { glViewportFunc = OPENGL_H + 270 };
void egl_viewport (sdl_data *, int, char *); 
